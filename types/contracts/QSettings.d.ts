/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface QSettingsInterface extends ethers.utils.Interface {
  functions: {
    "getAdmin()": FunctionFragment;
    "getFoundation()": FunctionFragment;
    "getFoundationWallet()": FunctionFragment;
    "getManager()": FunctionFragment;
    "getQAirdrop()": FunctionFragment;
    "getQNft()": FunctionFragment;
    "getQNftGov()": FunctionFragment;
    "getQNftSettings()": FunctionFragment;
    "getQStk()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "setAddresses(address,address,address,address,address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setFoundation(address)": FunctionFragment;
    "setFoundationWallet(address)": FunctionFragment;
    "setManager(address)": FunctionFragment;
    "setQAirdrop(address)": FunctionFragment;
    "setQNft(address)": FunctionFragment;
    "setQNftGov(address)": FunctionFragment;
    "setQNftSettings(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFoundation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFoundationWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQAirdrop",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getQNft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getQNftGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQNftSettings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getQStk", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFoundation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFoundationWallet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setManager", values: [string]): string;
  encodeFunctionData(functionFragment: "setQAirdrop", values: [string]): string;
  encodeFunctionData(functionFragment: "setQNft", values: [string]): string;
  encodeFunctionData(functionFragment: "setQNftGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setQNftSettings",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFoundation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFoundationWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getQNftGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQNftSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQStk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFoundation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFoundationWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setQAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setQNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setQNftGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setQNftSettings",
    data: BytesLike
  ): Result;

  events: {
    "SetAdmin(address)": EventFragment;
    "SetFoundation(address)": EventFragment;
    "SetFoundationWallet(address)": EventFragment;
    "SetManager(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFoundation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFoundationWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetManager"): EventFragment;
}

export class QSettings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QSettingsInterface;

  functions: {
    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    getFoundation(overrides?: CallOverrides): Promise<[string]>;

    getFoundationWallet(overrides?: CallOverrides): Promise<[string]>;

    getManager(overrides?: CallOverrides): Promise<[string]>;

    getQAirdrop(overrides?: CallOverrides): Promise<[string]>;

    getQNft(overrides?: CallOverrides): Promise<[string]>;

    getQNftGov(overrides?: CallOverrides): Promise<[string]>;

    getQNftSettings(overrides?: CallOverrides): Promise<[string]>;

    getQStk(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _admin: string,
      _manager: string,
      _foundation: string,
      _foundationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _qstk: string,
      _qAirdrop: string,
      _qNftSettings: string,
      _qNftGov: string,
      _qNft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFoundation(
      _foundation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFoundationWallet(
      _foundationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setQAirdrop(
      _qAirdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setQNft(
      _qNft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setQNftGov(
      _qNftGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setQNftSettings(
      _qNftSettings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAdmin(overrides?: CallOverrides): Promise<string>;

  getFoundation(overrides?: CallOverrides): Promise<string>;

  getFoundationWallet(overrides?: CallOverrides): Promise<string>;

  getManager(overrides?: CallOverrides): Promise<string>;

  getQAirdrop(overrides?: CallOverrides): Promise<string>;

  getQNft(overrides?: CallOverrides): Promise<string>;

  getQNftGov(overrides?: CallOverrides): Promise<string>;

  getQNftSettings(overrides?: CallOverrides): Promise<string>;

  getQStk(overrides?: CallOverrides): Promise<string>;

  initialize(
    _admin: string,
    _manager: string,
    _foundation: string,
    _foundationWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _qstk: string,
    _qAirdrop: string,
    _qNftSettings: string,
    _qNftGov: string,
    _qNft: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFoundation(
    _foundation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFoundationWallet(
    _foundationWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setQAirdrop(
    _qAirdrop: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setQNft(
    _qNft: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setQNftGov(
    _qNftGov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setQNftSettings(
    _qNftSettings: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAdmin(overrides?: CallOverrides): Promise<string>;

    getFoundation(overrides?: CallOverrides): Promise<string>;

    getFoundationWallet(overrides?: CallOverrides): Promise<string>;

    getManager(overrides?: CallOverrides): Promise<string>;

    getQAirdrop(overrides?: CallOverrides): Promise<string>;

    getQNft(overrides?: CallOverrides): Promise<string>;

    getQNftGov(overrides?: CallOverrides): Promise<string>;

    getQNftSettings(overrides?: CallOverrides): Promise<string>;

    getQStk(overrides?: CallOverrides): Promise<string>;

    initialize(
      _admin: string,
      _manager: string,
      _foundation: string,
      _foundationWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _qstk: string,
      _qAirdrop: string,
      _qNftSettings: string,
      _qNftGov: string,
      _qNft: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setFoundation(
      _foundation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFoundationWallet(
      _foundationWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(_manager: string, overrides?: CallOverrides): Promise<void>;

    setQAirdrop(_qAirdrop: string, overrides?: CallOverrides): Promise<void>;

    setQNft(_qNft: string, overrides?: CallOverrides): Promise<void>;

    setQNftGov(_qNftGov: string, overrides?: CallOverrides): Promise<void>;

    setQNftSettings(
      _qNftSettings: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SetAdmin(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;

    SetFoundation(
      foundation?: string | null
    ): TypedEventFilter<[string], { foundation: string }>;

    SetFoundationWallet(
      foundationWallet?: string | null
    ): TypedEventFilter<[string], { foundationWallet: string }>;

    SetManager(
      executor?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [string, string],
      { executor: string; manager: string }
    >;
  };

  estimateGas: {
    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getFoundation(overrides?: CallOverrides): Promise<BigNumber>;

    getFoundationWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getManager(overrides?: CallOverrides): Promise<BigNumber>;

    getQAirdrop(overrides?: CallOverrides): Promise<BigNumber>;

    getQNft(overrides?: CallOverrides): Promise<BigNumber>;

    getQNftGov(overrides?: CallOverrides): Promise<BigNumber>;

    getQNftSettings(overrides?: CallOverrides): Promise<BigNumber>;

    getQStk(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _admin: string,
      _manager: string,
      _foundation: string,
      _foundationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _qstk: string,
      _qAirdrop: string,
      _qNftSettings: string,
      _qNftGov: string,
      _qNft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFoundation(
      _foundation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFoundationWallet(
      _foundationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setQAirdrop(
      _qAirdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setQNft(
      _qNft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setQNftGov(
      _qNftGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setQNftSettings(
      _qNftSettings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFoundation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFoundationWallet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQAirdrop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQNftGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQNftSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQStk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      _manager: string,
      _foundation: string,
      _foundationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _qstk: string,
      _qAirdrop: string,
      _qNftSettings: string,
      _qNftGov: string,
      _qNft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFoundation(
      _foundation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFoundationWallet(
      _foundationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setQAirdrop(
      _qAirdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setQNft(
      _qNft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setQNftGov(
      _qNftGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setQNftSettings(
      _qNftSettings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
