/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface QSettingsInterface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "foundation()": FunctionFragment;
    "foundationWallet()": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "manager()": FunctionFragment;
    "qstk()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setFoundation(address)": FunctionFragment;
    "setFoundationWallet(address)": FunctionFragment;
    "setManager(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "foundation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "foundationWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "qstk", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFoundation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFoundationWallet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setManager", values: [string]): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "foundation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "foundationWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "qstk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFoundation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFoundationWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;

  events: {
    "SetAdmin(address)": EventFragment;
    "SetFoundation(address)": EventFragment;
    "SetFoundationWallet(address)": EventFragment;
    "SetManager(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFoundation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFoundationWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetManager"): EventFragment;
}

export class QSettings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QSettingsInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    foundation(overrides?: CallOverrides): Promise<[string]>;

    foundationWallet(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _admin: string,
      _manager: string,
      _foundation: string,
      _foundationWallet: string,
      _qstk: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    qstk(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFoundation(
      _foundation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFoundationWallet(
      _foundationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  foundation(overrides?: CallOverrides): Promise<string>;

  foundationWallet(overrides?: CallOverrides): Promise<string>;

  initialize(
    _admin: string,
    _manager: string,
    _foundation: string,
    _foundationWallet: string,
    _qstk: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  qstk(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFoundation(
    _foundation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFoundationWallet(
    _foundationWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    foundation(overrides?: CallOverrides): Promise<string>;

    foundationWallet(overrides?: CallOverrides): Promise<string>;

    initialize(
      _admin: string,
      _manager: string,
      _foundation: string,
      _foundationWallet: string,
      _qstk: string,
      overrides?: CallOverrides
    ): Promise<void>;

    manager(overrides?: CallOverrides): Promise<string>;

    qstk(overrides?: CallOverrides): Promise<string>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setFoundation(
      _foundation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFoundationWallet(
      _foundationWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(_manager: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    SetAdmin(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;

    SetFoundation(
      foundation?: string | null
    ): TypedEventFilter<[string], { foundation: string }>;

    SetFoundationWallet(
      foundationWallet?: string | null
    ): TypedEventFilter<[string], { foundationWallet: string }>;

    SetManager(
      executor?: string | null,
      manager?: string | null
    ): TypedEventFilter<
      [string, string],
      { executor: string; manager: string }
    >;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    foundation(overrides?: CallOverrides): Promise<BigNumber>;

    foundationWallet(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _admin: string,
      _manager: string,
      _foundation: string,
      _foundationWallet: string,
      _qstk: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    qstk(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFoundation(
      _foundation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFoundationWallet(
      _foundationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foundation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foundationWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      _manager: string,
      _foundation: string,
      _foundationWallet: string,
      _qstk: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qstk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFoundation(
      _foundation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFoundationWallet(
      _foundationWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
