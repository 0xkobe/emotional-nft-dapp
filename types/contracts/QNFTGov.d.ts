/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface QNFTGovInterface extends ethers.utils.Interface {
  functions: {
    "MIN_VOTE_DURATION()": FunctionFragment;
    "PERCENT_MAX()": FunctionFragment;
    "SAFE_VOTE_END_DURATION()": FunctionFragment;
    "VOTE_QUORUM()": FunctionFragment;
    "canVote(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "qnft()": FunctionFragment;
    "qnftSettings()": FunctionFragment;
    "safeWithdraw(address)": FunctionFragment;
    "setQNft(address)": FunctionFragment;
    "settings()": FunctionFragment;
    "totalUsers()": FunctionFragment;
    "updateVote(address,uint256,uint256)": FunctionFragment;
    "voteAddressByVoter(address)": FunctionFragment;
    "voteGovernanceAddress(address)": FunctionFragment;
    "voteResult(address)": FunctionFragment;
    "voteStatus()": FunctionFragment;
    "withdrawToGovernanceAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MIN_VOTE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAFE_VOTE_END_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_QUORUM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "canVote", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "qnft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "qnftSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setQNft", values: [string]): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateVote",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteAddressByVoter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "voteGovernanceAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "voteResult", values: [string]): string;
  encodeFunctionData(
    functionFragment: "voteStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToGovernanceAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_VOTE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAFE_VOTE_END_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_QUORUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "qnft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "qnftSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setQNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteAddressByVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteGovernanceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToGovernanceAddress",
    data: BytesLike
  ): Result;

  events: {
    "SafeWithdraw(address,address,uint256)": EventFragment;
    "UpdateVote(address,uint256,uint256)": EventFragment;
    "VoteGovernanceAddress(address,address)": EventFragment;
    "WithdrawToGovernanceAddress(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SafeWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteGovernanceAddress"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawToGovernanceAddress"
  ): EventFragment;
}

export class QNFTGov extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QNFTGovInterface;

  functions: {
    MIN_VOTE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENT_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    SAFE_VOTE_END_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTE_QUORUM(overrides?: CallOverrides): Promise<[BigNumber]>;

    canVote(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _settings: string,
      _qnftSettings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    qnft(overrides?: CallOverrides): Promise<[string]>;

    qnftSettings(overrides?: CallOverrides): Promise<[string]>;

    safeWithdraw(
      multisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setQNft(
      _qnft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settings(overrides?: CallOverrides): Promise<[string]>;

    totalUsers(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateVote(
      user: string,
      originAmount: BigNumberish,
      currentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteAddressByVoter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    voteGovernanceAddress(
      multisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteResult(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    voteStatus(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean] & {
        mintStarted: boolean;
        mintFinished: boolean;
        ableToWithdraw: boolean;
        ableToSafeWithdraw: boolean;
      }
    >;

    withdrawToGovernanceAddress(
      multisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_VOTE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  SAFE_VOTE_END_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  VOTE_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

  canVote(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _settings: string,
    _qnftSettings: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  qnft(overrides?: CallOverrides): Promise<string>;

  qnftSettings(overrides?: CallOverrides): Promise<string>;

  safeWithdraw(
    multisig: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setQNft(
    _qnft: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settings(overrides?: CallOverrides): Promise<string>;

  totalUsers(overrides?: CallOverrides): Promise<BigNumber>;

  updateVote(
    user: string,
    originAmount: BigNumberish,
    currentAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteAddressByVoter(arg0: string, overrides?: CallOverrides): Promise<string>;

  voteGovernanceAddress(
    multisig: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteResult(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  voteStatus(
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, boolean] & {
      mintStarted: boolean;
      mintFinished: boolean;
      ableToWithdraw: boolean;
      ableToSafeWithdraw: boolean;
    }
  >;

  withdrawToGovernanceAddress(
    multisig: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_VOTE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    SAFE_VOTE_END_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    canVote(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _settings: string,
      _qnftSettings: string,
      overrides?: CallOverrides
    ): Promise<void>;

    qnft(overrides?: CallOverrides): Promise<string>;

    qnftSettings(overrides?: CallOverrides): Promise<string>;

    safeWithdraw(multisig: string, overrides?: CallOverrides): Promise<void>;

    setQNft(_qnft: string, overrides?: CallOverrides): Promise<void>;

    settings(overrides?: CallOverrides): Promise<string>;

    totalUsers(overrides?: CallOverrides): Promise<BigNumber>;

    updateVote(
      user: string,
      originAmount: BigNumberish,
      currentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voteAddressByVoter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    voteGovernanceAddress(
      multisig: string,
      overrides?: CallOverrides
    ): Promise<void>;

    voteResult(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    voteStatus(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean] & {
        mintStarted: boolean;
        mintFinished: boolean;
        ableToWithdraw: boolean;
        ableToSafeWithdraw: boolean;
      }
    >;

    withdrawToGovernanceAddress(
      multisig: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SafeWithdraw(
      owner?: string | null,
      ultisig?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; ultisig: string; amount: BigNumber }
    >;

    UpdateVote(
      user?: string | null,
      originAmount?: null,
      currentAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; originAmount: BigNumber; currentAmount: BigNumber }
    >;

    VoteGovernanceAddress(
      voter?: string | null,
      multisig?: string | null
    ): TypedEventFilter<[string, string], { voter: string; multisig: string }>;

    WithdrawToGovernanceAddress(
      user?: string | null,
      multisig?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; multisig: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    MIN_VOTE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    SAFE_VOTE_END_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    canVote(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _settings: string,
      _qnftSettings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    qnft(overrides?: CallOverrides): Promise<BigNumber>;

    qnftSettings(overrides?: CallOverrides): Promise<BigNumber>;

    safeWithdraw(
      multisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setQNft(
      _qnft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    totalUsers(overrides?: CallOverrides): Promise<BigNumber>;

    updateVote(
      user: string,
      originAmount: BigNumberish,
      currentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteAddressByVoter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteGovernanceAddress(
      multisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteResult(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    voteStatus(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToGovernanceAddress(
      multisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_VOTE_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENT_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SAFE_VOTE_END_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTE_QUORUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canVote(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _settings: string,
      _qnftSettings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    qnft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qnftSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeWithdraw(
      multisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setQNft(
      _qnft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateVote(
      user: string,
      originAmount: BigNumberish,
      currentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteAddressByVoter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteGovernanceAddress(
      multisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteResult(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToGovernanceAddress(
      multisig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
