/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockMultisig, MockMultisigInterface } from "../MockMultisig";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604280601d6000396000f3fe608060405236600a57005b00fea264697066735822122048ceae0fa9dbd2c542d1f970f9e4945298b24e605343c67ca23d2e5ec152d67e64736f6c63430008000033";

export class MockMultisig__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockMultisig> {
    return super.deploy(overrides || {}) as Promise<MockMultisig>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockMultisig {
    return super.attach(address) as MockMultisig;
  }
  connect(signer: Signer): MockMultisig__factory {
    return super.connect(signer) as MockMultisig__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockMultisigInterface {
    return new utils.Interface(_abi) as MockMultisigInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockMultisig {
    return new Contract(address, _abi, signerOrProvider) as MockMultisig;
  }
}
