/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockMultisig, MockMultisigInterface } from "../MockMultisig";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xf1ef5fa9",
        type: "bytes32",
      },
    ],
    name: "c_0xf1ef5fa9",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610105806100206000396000f3fe608060405260043610601f5760003560e01c80631530adb1146051576025565b36602557005b604f7f41f88bf3d98a7bfb94eef936b5bf36efe4e74dcb65d54620e316d0119341843060001b6075565b005b348015605c57600080fd5b5060736004803603810190606f9190608b565b6075565b005b50565b60008135905060858160bb565b92915050565b600060208284031215609c57600080fd5b600060a8848285016078565b91505092915050565b6000819050919050565b60c28160b1565b811460cc57600080fd5b5056fea264697066735822122019dcac47d5bb10fbfc43ae3890ef8fda070e3830065aa2dd4c7310c2f3fb0d1e64736f6c63430008000033";

export class MockMultisig__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockMultisig> {
    return super.deploy(overrides || {}) as Promise<MockMultisig>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockMultisig {
    return super.attach(address) as MockMultisig;
  }
  connect(signer: Signer): MockMultisig__factory {
    return super.connect(signer) as MockMultisig__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockMultisigInterface {
    return new utils.Interface(_abi) as MockMultisigInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockMultisig {
    return new Contract(address, _abi, signerOrProvider) as MockMultisig;
  }
}
