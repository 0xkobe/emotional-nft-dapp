/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface QCrowdSaleInterface extends ethers.utils.Interface {
  functions: {
    "buyQStk(uint256)": FunctionFragment;
    "depositQstk(uint256)": FunctionFragment;
    "end()": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "qstkPrice()": FunctionFragment;
    "setQStkPrice(uint256)": FunctionFragment;
    "setSettings(address)": FunctionFragment;
    "settings()": FunctionFragment;
    "start()": FunctionFragment;
    "started()": FunctionFragment;
    "withdrawETH(address)": FunctionFragment;
    "withdrawQstk(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyQStk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositQstk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "qstkPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setQStkPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setSettings", values: [string]): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "started", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdrawETH", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawQstk",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyQStk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositQstk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "qstkPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setQStkPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "started", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQstk",
    data: BytesLike
  ): Result;

  events: {};
}

export class QCrowdSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QCrowdSaleInterface;

  functions: {
    buyQStk(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    end(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _settings: string,
      _qstkPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    qstkPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    setQStkPrice(
      _qstkPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSettings(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settings(overrides?: CallOverrides): Promise<[string]>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    started(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawETH(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyQStk(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositQstk(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  end(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _settings: string,
    _qstkPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  qstkPrice(overrides?: CallOverrides): Promise<BigNumber>;

  setQStkPrice(
    _qstkPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSettings(
    _settings: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settings(overrides?: CallOverrides): Promise<string>;

  start(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  started(overrides?: CallOverrides): Promise<boolean>;

  withdrawETH(
    treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawQstk(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyQStk(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositQstk(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    end(overrides?: CallOverrides): Promise<void>;

    initialize(
      _settings: string,
      _qstkPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    qstkPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setQStkPrice(
      _qstkPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettings(_settings: string, overrides?: CallOverrides): Promise<void>;

    settings(overrides?: CallOverrides): Promise<string>;

    start(overrides?: CallOverrides): Promise<void>;

    started(overrides?: CallOverrides): Promise<boolean>;

    withdrawETH(treasury: string, overrides?: CallOverrides): Promise<void>;

    withdrawQstk(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buyQStk(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    end(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _settings: string,
      _qstkPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    qstkPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setQStkPrice(
      _qstkPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSettings(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    started(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawETH(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyQStk(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    end(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _settings: string,
      _qstkPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    qstkPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setQStkPrice(
      _qstkPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSettings(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    started(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawETH(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
