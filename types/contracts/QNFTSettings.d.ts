/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface QNFTSettingsInterface extends ethers.utils.Interface {
  functions: {
    "NFT_SALE_DURATION()": FunctionFragment;
    "addCharacters(uint256[],uint256)": FunctionFragment;
    "addFavCoinPrices(uint256[])": FunctionFragment;
    "addLockOption(uint256,uint256,uint32,uint8)": FunctionFragment;
    "calcMintPrice(uint32,uint32,uint32,uint256,uint256)": FunctionFragment;
    "characterCount()": FunctionFragment;
    "characterMaxSupply(uint32)": FunctionFragment;
    "characterPrice(uint32)": FunctionFragment;
    "favCoinPrices(uint32)": FunctionFragment;
    "favCoinsCount()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "lockOptionLockDuration(uint32)": FunctionFragment;
    "lockOptions(uint256)": FunctionFragment;
    "lockOptionsCount()": FunctionFragment;
    "mintEndTime()": FunctionFragment;
    "mintFinished()": FunctionFragment;
    "mintPaused()": FunctionFragment;
    "mintStartTime()": FunctionFragment;
    "mintStarted()": FunctionFragment;
    "nonTokenPriceMultiplier()": FunctionFragment;
    "onlyAirdropUsers()": FunctionFragment;
    "pauseMint()": FunctionFragment;
    "qstkPrice()": FunctionFragment;
    "setNonTokenPriceMultiplier(uint256)": FunctionFragment;
    "setOnlyAirdropUsers(bool)": FunctionFragment;
    "setSettings(address)": FunctionFragment;
    "setTokenPriceMultiplier(uint256)": FunctionFragment;
    "setTransferAllowedAfterRedeem(bool)": FunctionFragment;
    "setUpgradePriceMultiplier(uint256)": FunctionFragment;
    "settings()": FunctionFragment;
    "startMint()": FunctionFragment;
    "tokenPriceMultiplier()": FunctionFragment;
    "transferAllowedAfterRedeem()": FunctionFragment;
    "unPauseMint()": FunctionFragment;
    "updateCharacterMaxSupplies(uint32,uint32,uint256)": FunctionFragment;
    "updateCharacterMaxSuppliesFromArray(uint32[],uint256[])": FunctionFragment;
    "updateCharacterMaxSupply(uint32,uint256)": FunctionFragment;
    "updateCharacterPrice(uint32,uint256)": FunctionFragment;
    "updateCharacterPrices(uint32,uint32,uint256)": FunctionFragment;
    "updateCharacterPricesFromArray(uint32[],uint256[])": FunctionFragment;
    "updateFavCoinPrice(uint32,uint256)": FunctionFragment;
    "updateLockOption(uint32,uint256,uint256,uint32,uint8)": FunctionFragment;
    "upgradePriceMultiplier()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "NFT_SALE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCharacters",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addFavCoinPrices",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addLockOption",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcMintPrice",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "characterCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "characterMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "characterPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "favCoinPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "favCoinsCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lockOptionLockDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockOptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockOptionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintFinished",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonTokenPriceMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onlyAirdropUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pauseMint", values?: undefined): string;
  encodeFunctionData(functionFragment: "qstkPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setNonTokenPriceMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOnlyAirdropUsers",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setSettings", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTokenPriceMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferAllowedAfterRedeem",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradePriceMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(functionFragment: "startMint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenPriceMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllowedAfterRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unPauseMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCharacterMaxSupplies",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCharacterMaxSuppliesFromArray",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCharacterMaxSupply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCharacterPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCharacterPrices",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCharacterPricesFromArray",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFavCoinPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLockOption",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePriceMultiplier",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "NFT_SALE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCharacters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFavCoinPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLockOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "characterCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "characterMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "characterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "favCoinPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "favCoinsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockOptionLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockOptionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonTokenPriceMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyAirdropUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "qstkPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNonTokenPriceMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOnlyAirdropUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPriceMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferAllowedAfterRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradePriceMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPriceMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowedAfterRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unPauseMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCharacterMaxSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCharacterMaxSuppliesFromArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCharacterMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCharacterPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCharacterPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCharacterPricesFromArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFavCoinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLockOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePriceMultiplier",
    data: BytesLike
  ): Result;

  events: {
    "AddCharacters(uint256[],uint256)": EventFragment;
    "AddFavCoinPrices(uint256[])": EventFragment;
    "AddLockOption(uint256,uint256,uint32,uint8)": EventFragment;
    "PauseMint(uint256)": EventFragment;
    "SetNonTokenPriceMultiplier(uint256)": EventFragment;
    "SetTokenPriceMultiplier(uint256)": EventFragment;
    "SetUpgradePriceMultiplier(uint256)": EventFragment;
    "StartMint(uint256)": EventFragment;
    "UnpauseMint(uint256)": EventFragment;
    "UpdateCharacterMaxSupplies(uint32,uint32,uint256)": EventFragment;
    "UpdateCharacterMaxSuppliesFromArray(uint32[],uint256[])": EventFragment;
    "UpdateCharacterMaxSupply(uint32,uint256)": EventFragment;
    "UpdateCharacterPrice(uint32,uint256)": EventFragment;
    "UpdateCharacterPrices(uint32,uint32,uint256)": EventFragment;
    "UpdateCharacterPricesFromArray(uint32[],uint256[])": EventFragment;
    "UpdateFavCoinPrice(uint32,uint256)": EventFragment;
    "UpdateLockOption(uint32,uint256,uint256,uint32,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCharacters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddFavCoinPrices"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLockOption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNonTokenPriceMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenPriceMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUpgradePriceMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnpauseMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCharacterMaxSupplies"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateCharacterMaxSuppliesFromArray"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCharacterMaxSupply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCharacterPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCharacterPrices"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateCharacterPricesFromArray"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFavCoinPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLockOption"): EventFragment;
}

export class QNFTSettings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QNFTSettingsInterface;

  functions: {
    NFT_SALE_DURATION(overrides?: CallOverrides): Promise<[number]>;

    addCharacters(
      _prices: BigNumberish[],
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFavCoinPrices(
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLockOption(
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _lockDuration: BigNumberish,
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcMintPrice(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _lockAmount: BigNumberish,
      _freeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalPrice: BigNumber;
        tokenPrice: BigNumber;
        nonTokenPrice: BigNumber;
      }
    >;

    characterCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    characterMaxSupply(
      _characterId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    characterPrice(
      _characterId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    favCoinPrices(
      _favCoinId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    favCoinsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockOptionLockDuration(
      _lockOptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    lockOptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        minAmount: BigNumber;
        maxAmount: BigNumber;
        lockDuration: number;
        discount: number;
      }
    >;

    lockOptionsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintFinished(overrides?: CallOverrides): Promise<[boolean]>;

    mintPaused(overrides?: CallOverrides): Promise<[boolean]>;

    mintStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintStarted(overrides?: CallOverrides): Promise<[boolean]>;

    nonTokenPriceMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    onlyAirdropUsers(overrides?: CallOverrides): Promise<[boolean]>;

    pauseMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    qstkPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    setNonTokenPriceMultiplier(
      _nonTokenPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOnlyAirdropUsers(
      _onlyAirdropUsers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSettings(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenPriceMultiplier(
      _tokenPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferAllowedAfterRedeem(
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpgradePriceMultiplier(
      _upgradePriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settings(overrides?: CallOverrides): Promise<[string]>;

    startMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenPriceMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferAllowedAfterRedeem(overrides?: CallOverrides): Promise<[boolean]>;

    unPauseMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCharacterMaxSupplies(
      _startIndex: BigNumberish,
      _length: BigNumberish,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCharacterMaxSuppliesFromArray(
      _indexes: BigNumberish[],
      _supplies: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCharacterMaxSupply(
      _characterId: BigNumberish,
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCharacterPrice(
      _characterId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCharacterPrices(
      _startIndex: BigNumberish,
      _length: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCharacterPricesFromArray(
      _indexes: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFavCoinPrice(
      _favCoinId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLockOption(
      _lockOptionId: BigNumberish,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _lockDuration: BigNumberish,
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradePriceMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  NFT_SALE_DURATION(overrides?: CallOverrides): Promise<number>;

  addCharacters(
    _prices: BigNumberish[],
    _maxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFavCoinPrices(
    _prices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLockOption(
    _minAmount: BigNumberish,
    _maxAmount: BigNumberish,
    _lockDuration: BigNumberish,
    _discount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcMintPrice(
    _characterId: BigNumberish,
    _favCoinId: BigNumberish,
    _lockOptionId: BigNumberish,
    _lockAmount: BigNumberish,
    _freeAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalPrice: BigNumber;
      tokenPrice: BigNumber;
      nonTokenPrice: BigNumber;
    }
  >;

  characterCount(overrides?: CallOverrides): Promise<BigNumber>;

  characterMaxSupply(
    _characterId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  characterPrice(
    _characterId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  favCoinPrices(
    _favCoinId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  favCoinsCount(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _settings: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockOptionLockDuration(
    _lockOptionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  lockOptions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number] & {
      minAmount: BigNumber;
      maxAmount: BigNumber;
      lockDuration: number;
      discount: number;
    }
  >;

  lockOptionsCount(overrides?: CallOverrides): Promise<BigNumber>;

  mintEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  mintFinished(overrides?: CallOverrides): Promise<boolean>;

  mintPaused(overrides?: CallOverrides): Promise<boolean>;

  mintStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  mintStarted(overrides?: CallOverrides): Promise<boolean>;

  nonTokenPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  onlyAirdropUsers(overrides?: CallOverrides): Promise<boolean>;

  pauseMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  qstkPrice(overrides?: CallOverrides): Promise<BigNumber>;

  setNonTokenPriceMultiplier(
    _nonTokenPriceMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOnlyAirdropUsers(
    _onlyAirdropUsers: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSettings(
    _settings: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenPriceMultiplier(
    _tokenPriceMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferAllowedAfterRedeem(
    _allow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpgradePriceMultiplier(
    _upgradePriceMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settings(overrides?: CallOverrides): Promise<string>;

  startMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  transferAllowedAfterRedeem(overrides?: CallOverrides): Promise<boolean>;

  unPauseMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCharacterMaxSupplies(
    _startIndex: BigNumberish,
    _length: BigNumberish,
    _supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCharacterMaxSuppliesFromArray(
    _indexes: BigNumberish[],
    _supplies: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCharacterMaxSupply(
    _characterId: BigNumberish,
    _maxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCharacterPrice(
    _characterId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCharacterPrices(
    _startIndex: BigNumberish,
    _length: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCharacterPricesFromArray(
    _indexes: BigNumberish[],
    _prices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFavCoinPrice(
    _favCoinId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLockOption(
    _lockOptionId: BigNumberish,
    _minAmount: BigNumberish,
    _maxAmount: BigNumberish,
    _lockDuration: BigNumberish,
    _discount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradePriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    NFT_SALE_DURATION(overrides?: CallOverrides): Promise<number>;

    addCharacters(
      _prices: BigNumberish[],
      _maxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addFavCoinPrices(
      _prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addLockOption(
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _lockDuration: BigNumberish,
      _discount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcMintPrice(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _lockAmount: BigNumberish,
      _freeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalPrice: BigNumber;
        tokenPrice: BigNumber;
        nonTokenPrice: BigNumber;
      }
    >;

    characterCount(overrides?: CallOverrides): Promise<BigNumber>;

    characterMaxSupply(
      _characterId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    characterPrice(
      _characterId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    favCoinPrices(
      _favCoinId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    favCoinsCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_settings: string, overrides?: CallOverrides): Promise<void>;

    lockOptionLockDuration(
      _lockOptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    lockOptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        minAmount: BigNumber;
        maxAmount: BigNumber;
        lockDuration: number;
        discount: number;
      }
    >;

    lockOptionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    mintEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintFinished(overrides?: CallOverrides): Promise<boolean>;

    mintPaused(overrides?: CallOverrides): Promise<boolean>;

    mintStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintStarted(overrides?: CallOverrides): Promise<boolean>;

    nonTokenPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    onlyAirdropUsers(overrides?: CallOverrides): Promise<boolean>;

    pauseMint(overrides?: CallOverrides): Promise<void>;

    qstkPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setNonTokenPriceMultiplier(
      _nonTokenPriceMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOnlyAirdropUsers(
      _onlyAirdropUsers: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettings(_settings: string, overrides?: CallOverrides): Promise<void>;

    setTokenPriceMultiplier(
      _tokenPriceMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferAllowedAfterRedeem(
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpgradePriceMultiplier(
      _upgradePriceMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settings(overrides?: CallOverrides): Promise<string>;

    startMint(overrides?: CallOverrides): Promise<void>;

    tokenPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    transferAllowedAfterRedeem(overrides?: CallOverrides): Promise<boolean>;

    unPauseMint(overrides?: CallOverrides): Promise<void>;

    updateCharacterMaxSupplies(
      _startIndex: BigNumberish,
      _length: BigNumberish,
      _supply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCharacterMaxSuppliesFromArray(
      _indexes: BigNumberish[],
      _supplies: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateCharacterMaxSupply(
      _characterId: BigNumberish,
      _maxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCharacterPrice(
      _characterId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCharacterPrices(
      _startIndex: BigNumberish,
      _length: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCharacterPricesFromArray(
      _indexes: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateFavCoinPrice(
      _favCoinId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLockOption(
      _lockOptionId: BigNumberish,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _lockDuration: BigNumberish,
      _discount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    AddCharacters(
      prices?: null,
      maxSupply?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber],
      { prices: BigNumber[]; maxSupply: BigNumber }
    >;

    AddFavCoinPrices(
      mintPrices?: null
    ): TypedEventFilter<[BigNumber[]], { mintPrices: BigNumber[] }>;

    AddLockOption(
      minAmount?: null,
      maxAmount?: null,
      lockDuration?: null,
      discount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number, number],
      {
        minAmount: BigNumber;
        maxAmount: BigNumber;
        lockDuration: number;
        discount: number;
      }
    >;

    PauseMint(
      pausedAt?: null
    ): TypedEventFilter<[BigNumber], { pausedAt: BigNumber }>;

    SetNonTokenPriceMultiplier(
      nonTokenPriceMultiplier?: null
    ): TypedEventFilter<[BigNumber], { nonTokenPriceMultiplier: BigNumber }>;

    SetTokenPriceMultiplier(
      tokenPriceMultiplier?: null
    ): TypedEventFilter<[BigNumber], { tokenPriceMultiplier: BigNumber }>;

    SetUpgradePriceMultiplier(
      upgradePriceMultiplier?: null
    ): TypedEventFilter<[BigNumber], { upgradePriceMultiplier: BigNumber }>;

    StartMint(
      startedAt?: null
    ): TypedEventFilter<[BigNumber], { startedAt: BigNumber }>;

    UnpauseMint(
      unPausedAt?: null
    ): TypedEventFilter<[BigNumber], { unPausedAt: BigNumber }>;

    UpdateCharacterMaxSupplies(
      startIndex?: null,
      length?: null,
      supply?: null
    ): TypedEventFilter<
      [number, number, BigNumber],
      { startIndex: number; length: number; supply: BigNumber }
    >;

    UpdateCharacterMaxSuppliesFromArray(
      indexes?: null,
      supplies?: null
    ): TypedEventFilter<
      [number[], BigNumber[]],
      { indexes: number[]; supplies: BigNumber[] }
    >;

    UpdateCharacterMaxSupply(
      characterId?: BigNumberish | null,
      maxSupply?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { characterId: number; maxSupply: BigNumber }
    >;

    UpdateCharacterPrice(
      characterId?: BigNumberish | null,
      price?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { characterId: number; price: BigNumber }
    >;

    UpdateCharacterPrices(
      startIndex?: null,
      length?: null,
      price?: null
    ): TypedEventFilter<
      [number, number, BigNumber],
      { startIndex: number; length: number; price: BigNumber }
    >;

    UpdateCharacterPricesFromArray(
      indexes?: null,
      prices?: null
    ): TypedEventFilter<
      [number[], BigNumber[]],
      { indexes: number[]; prices: BigNumber[] }
    >;

    UpdateFavCoinPrice(
      favCoinId?: null,
      price?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { favCoinId: number; price: BigNumber }
    >;

    UpdateLockOption(
      lockOptionId?: BigNumberish | null,
      minAmount?: null,
      maxAmount?: null,
      lockDuration?: null,
      discount?: null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber, number, number],
      {
        lockOptionId: number;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        lockDuration: number;
        discount: number;
      }
    >;
  };

  estimateGas: {
    NFT_SALE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    addCharacters(
      _prices: BigNumberish[],
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFavCoinPrices(
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLockOption(
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _lockDuration: BigNumberish,
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcMintPrice(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _lockAmount: BigNumberish,
      _freeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    characterCount(overrides?: CallOverrides): Promise<BigNumber>;

    characterMaxSupply(
      _characterId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    characterPrice(
      _characterId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    favCoinPrices(
      _favCoinId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    favCoinsCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockOptionLockDuration(
      _lockOptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockOptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockOptionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    mintEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintFinished(overrides?: CallOverrides): Promise<BigNumber>;

    mintPaused(overrides?: CallOverrides): Promise<BigNumber>;

    mintStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintStarted(overrides?: CallOverrides): Promise<BigNumber>;

    nonTokenPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    onlyAirdropUsers(overrides?: CallOverrides): Promise<BigNumber>;

    pauseMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    qstkPrice(overrides?: CallOverrides): Promise<BigNumber>;

    setNonTokenPriceMultiplier(
      _nonTokenPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOnlyAirdropUsers(
      _onlyAirdropUsers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSettings(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenPriceMultiplier(
      _tokenPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferAllowedAfterRedeem(
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpgradePriceMultiplier(
      _upgradePriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    startMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    transferAllowedAfterRedeem(overrides?: CallOverrides): Promise<BigNumber>;

    unPauseMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCharacterMaxSupplies(
      _startIndex: BigNumberish,
      _length: BigNumberish,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCharacterMaxSuppliesFromArray(
      _indexes: BigNumberish[],
      _supplies: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCharacterMaxSupply(
      _characterId: BigNumberish,
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCharacterPrice(
      _characterId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCharacterPrices(
      _startIndex: BigNumberish,
      _length: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCharacterPricesFromArray(
      _indexes: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFavCoinPrice(
      _favCoinId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLockOption(
      _lockOptionId: BigNumberish,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _lockDuration: BigNumberish,
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradePriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NFT_SALE_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCharacters(
      _prices: BigNumberish[],
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFavCoinPrices(
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLockOption(
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _lockDuration: BigNumberish,
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcMintPrice(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _lockAmount: BigNumberish,
      _freeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    characterCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    characterMaxSupply(
      _characterId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    characterPrice(
      _characterId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    favCoinPrices(
      _favCoinId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    favCoinsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockOptionLockDuration(
      _lockOptionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockOptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockOptionsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintFinished(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonTokenPriceMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onlyAirdropUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    qstkPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNonTokenPriceMultiplier(
      _nonTokenPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOnlyAirdropUsers(
      _onlyAirdropUsers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSettings(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenPriceMultiplier(
      _tokenPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferAllowedAfterRedeem(
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpgradePriceMultiplier(
      _upgradePriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenPriceMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAllowedAfterRedeem(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unPauseMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCharacterMaxSupplies(
      _startIndex: BigNumberish,
      _length: BigNumberish,
      _supply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCharacterMaxSuppliesFromArray(
      _indexes: BigNumberish[],
      _supplies: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCharacterMaxSupply(
      _characterId: BigNumberish,
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCharacterPrice(
      _characterId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCharacterPrices(
      _startIndex: BigNumberish,
      _length: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCharacterPricesFromArray(
      _indexes: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFavCoinPrice(
      _favCoinId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLockOption(
      _lockOptionId: BigNumberish,
      _minAmount: BigNumberish,
      _maxAmount: BigNumberish,
      _lockDuration: BigNumberish,
      _discount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradePriceMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
