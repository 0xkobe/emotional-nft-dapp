/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface QNFTInterface extends ethers.utils.Interface {
  functions: {
    "airdrop()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "depositQstk(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "initialize(address,address,address,address,string,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "mintNft(uint32,uint32,uint32,uint32,uint256)": FunctionFragment;
    "mintNftForAirdropUser(uint32,uint32,uint32,uint32,uint256,uint256,bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "nftCountByCharacter(uint256)": FunctionFragment;
    "nftData(uint256)": FunctionFragment;
    "nftSettings()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "qstk()": FunctionFragment;
    "qstkBalances(address)": FunctionFragment;
    "remainingQstk()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setAirdrop(address)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setMaxSupply(uint256)": FunctionFragment;
    "setNFTSettings(address)": FunctionFragment;
    "setSettings(address)": FunctionFragment;
    "settings()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalAssignedQstk()": FunctionFragment;
    "totalQstkBalance()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unlockQstkFromNft(uint256)": FunctionFragment;
    "updateBaseUrl(string)": FunctionFragment;
    "upgradeNftCoin(uint256,uint32)": FunctionFragment;
    "withdrawQstk(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "airdrop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositQstk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintNft",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNftForAirdropUser",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftCountByCharacter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "qstk", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "qstkBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingQstk",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAirdrop", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTSettings",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setSettings", values: [string]): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssignedQstk",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQstkBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockQstkFromNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseUrl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeNftCoin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawQstk",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "airdrop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositQstk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintNftForAirdropUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftCountByCharacter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "qstk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "qstkBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingQstk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAirdrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssignedQstk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQstkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockQstkFromNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeNftCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQstk",
    data: BytesLike
  ): Result;

  events: {
    "AddFreeAllocation(address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "DepositQstk(uint256)": EventFragment;
    "MintNFT(address,uint256,uint32,uint32,uint32,uint256,uint256)": EventFragment;
    "RemoveFreeAllocation(address,uint256)": EventFragment;
    "SetMaxSupply(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnlockQstkFromNft(address,uint256,uint256)": EventFragment;
    "UpgradeNftCoin(address,uint256,uint32,uint32)": EventFragment;
    "WithdrawQstk(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddFreeAllocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositQstk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveFreeAllocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxSupply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockQstkFromNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeNftCoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawQstk"): EventFragment;
}

export class QNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QNFTInterface;

  functions: {
    airdrop(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _settings: string,
      _nftSettings: string,
      _governance: string,
      _airdrop: string,
      _quiverBaseUrl: string,
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintNft(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _metaId: BigNumberish,
      _lockAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintNftForAirdropUser(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _metaId: BigNumberish,
      _lockAmount: BigNumberish,
      _airdropAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftCountByCharacter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nftData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, BigNumber, BigNumber, BigNumber, boolean] & {
        characterId: number;
        favCoinId: number;
        metaId: number;
        lockDuration: BigNumber;
        lockAmount: BigNumber;
        createdAt: BigNumber;
        withdrawn: boolean;
      }
    >;

    nftSettings(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    qstk(overrides?: CallOverrides): Promise<[string]>;

    qstkBalances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    remainingQstk(overrides?: CallOverrides): Promise<[BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAirdrop(
      _airdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSupply(
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTSettings(
      _nftSettings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSettings(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settings(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalAssignedQstk(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalQstkBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockQstkFromNft(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBaseUrl(
      _quiverBaseUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeNftCoin(
      _nftId: BigNumberish,
      _favCoinId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  airdrop(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositQstk(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  initialize(
    _settings: string,
    _nftSettings: string,
    _governance: string,
    _airdrop: string,
    _quiverBaseUrl: string,
    _maxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  mintNft(
    _characterId: BigNumberish,
    _favCoinId: BigNumberish,
    _lockOptionId: BigNumberish,
    _metaId: BigNumberish,
    _lockAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintNftForAirdropUser(
    _characterId: BigNumberish,
    _favCoinId: BigNumberish,
    _lockOptionId: BigNumberish,
    _metaId: BigNumberish,
    _lockAmount: BigNumberish,
    _airdropAmount: BigNumberish,
    _signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nftCountByCharacter(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nftData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, BigNumber, BigNumber, BigNumber, boolean] & {
      characterId: number;
      favCoinId: number;
      metaId: number;
      lockDuration: BigNumber;
      lockAmount: BigNumber;
      createdAt: BigNumber;
      withdrawn: boolean;
    }
  >;

  nftSettings(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  qstk(overrides?: CallOverrides): Promise<string>;

  qstkBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  remainingQstk(overrides?: CallOverrides): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAirdrop(
    _airdrop: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSupply(
    _maxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTSettings(
    _nftSettings: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSettings(
    _settings: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settings(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalAssignedQstk(overrides?: CallOverrides): Promise<BigNumber>;

  totalQstkBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockQstkFromNft(
    _nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBaseUrl(
    _quiverBaseUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeNftCoin(
    _nftId: BigNumberish,
    _favCoinId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawQstk(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    airdrop(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositQstk(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    initialize(
      _settings: string,
      _nftSettings: string,
      _governance: string,
      _airdrop: string,
      _quiverBaseUrl: string,
      _maxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mintNft(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _metaId: BigNumberish,
      _lockAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintNftForAirdropUser(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _metaId: BigNumberish,
      _lockAmount: BigNumberish,
      _airdropAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nftCountByCharacter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, BigNumber, BigNumber, BigNumber, boolean] & {
        characterId: number;
        favCoinId: number;
        metaId: number;
        lockDuration: BigNumber;
        lockAmount: BigNumber;
        createdAt: BigNumber;
        withdrawn: boolean;
      }
    >;

    nftSettings(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    qstk(overrides?: CallOverrides): Promise<string>;

    qstkBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    remainingQstk(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAirdrop(_airdrop: string, overrides?: CallOverrides): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupply(
      _maxSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTSettings(
      _nftSettings: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettings(_settings: string, overrides?: CallOverrides): Promise<void>;

    settings(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalAssignedQstk(overrides?: CallOverrides): Promise<BigNumber>;

    totalQstkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockQstkFromNft(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBaseUrl(
      _quiverBaseUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeNftCoin(
      _nftId: BigNumberish,
      _favCoinId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawQstk(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddFreeAllocation(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    DepositQstk(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    MintNFT(
      user?: string | null,
      nftId?: BigNumberish | null,
      characterId?: null,
      favCoinId?: null,
      metaId?: null,
      lockDuration?: null,
      mintAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, number, number, number, BigNumber, BigNumber],
      {
        user: string;
        nftId: BigNumber;
        characterId: number;
        favCoinId: number;
        metaId: number;
        lockDuration: BigNumber;
        mintAmount: BigNumber;
      }
    >;

    RemoveFreeAllocation(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    SetMaxSupply(
      maxSupply?: null
    ): TypedEventFilter<[BigNumber], { maxSupply: BigNumber }>;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    UnlockQstkFromNft(
      user?: string | null,
      nftId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; nftId: BigNumber; amount: BigNumber }
    >;

    UpgradeNftCoin(
      user?: string | null,
      nftId?: BigNumberish | null,
      oldFavCoinId?: null,
      newFavCoinId?: null
    ): TypedEventFilter<
      [string, BigNumber, number, number],
      {
        user: string;
        nftId: BigNumber;
        oldFavCoinId: number;
        newFavCoinId: number;
      }
    >;

    WithdrawQstk(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;
  };

  estimateGas: {
    airdrop(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _settings: string,
      _nftSettings: string,
      _governance: string,
      _airdrop: string,
      _quiverBaseUrl: string,
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mintNft(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _metaId: BigNumberish,
      _lockAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintNftForAirdropUser(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _metaId: BigNumberish,
      _lockAmount: BigNumberish,
      _airdropAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftCountByCharacter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftData(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nftSettings(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    qstk(overrides?: CallOverrides): Promise<BigNumber>;

    qstkBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    remainingQstk(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAirdrop(
      _airdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSupply(
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTSettings(
      _nftSettings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSettings(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAssignedQstk(overrides?: CallOverrides): Promise<BigNumber>;

    totalQstkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockQstkFromNft(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBaseUrl(
      _quiverBaseUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeNftCoin(
      _nftId: BigNumberish,
      _favCoinId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    airdrop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _settings: string,
      _nftSettings: string,
      _governance: string,
      _airdrop: string,
      _quiverBaseUrl: string,
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintNft(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _metaId: BigNumberish,
      _lockAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintNftForAirdropUser(
      _characterId: BigNumberish,
      _favCoinId: BigNumberish,
      _lockOptionId: BigNumberish,
      _metaId: BigNumberish,
      _lockAmount: BigNumberish,
      _airdropAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftCountByCharacter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    qstk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qstkBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingQstk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAirdrop(
      _airdrop: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSupply(
      _maxSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTSettings(
      _nftSettings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSettings(
      _settings: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAssignedQstk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalQstkBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockQstkFromNft(
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBaseUrl(
      _quiverBaseUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeNftCoin(
      _nftId: BigNumberish,
      _favCoinId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawQstk(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
